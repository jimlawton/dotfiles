#!/bin/sh

# Shell Functions.

# Set iTerm2 tab title
#function tabTitle() {
#    echo -ne "\033]0;"$*"\007"; 
#}

# Set iTerm2 window title
#function winTitle() {
#    echo -ne "\033]0;"$*"\007"; 
#}

# Always list directory contents and set title upon 'cd'
#function cd() {
#    builtin cd "$@"; tabTitle ${PWD##*/}; winTitle ${PWD/#"$HOME" /~};
#}

function killxscreensaver() {
    pkill xscreensaver
    echo ""
    return
}

function col() {
    awk '{print $'$(echo $* | sed -e 's/ /,$/g')'}';
}

# Awk calculator.
function calc() {
    awk "BEGIN { print $* }" ;
}

# Add a path to the global PATH.
function pathmunge() {
    if ! echo $PATH | /bin/egrep -q "(^|:)$1($|:)" ; then
       if [ "$2" = "after" ] ; then
          PATH=$PATH:$1
       else
          PATH=$1:$PATH
       fi
    fi
}

# .. - Does a 'cd ..'
# .. 3 - Does a 'cd ../../..'
#
# Usage .. [n]
# Go up n-levels.
# i.e.: .. 3 will go up 3 levels
function .. {
	local arg=${1:-1};
	local dir=""
	while [ $arg -gt 0 ]; do
		dir="../$dir"
		arg=$(($arg - 1));
	done
	cd $dir >&/dev/null
}

# Usage ... Thing/Some
# Go up until you encounter Thing/Some, then go there
# i.e.: I'm in /usr/share/X11
# ... src will go up to /usr, then change to /usr/src
function ... {
	if [ -z "$1" ]; then
		return
	fi
	local maxlvl=16
	local dir=$1
	while [ $maxlvl -gt 0 ]; do
		dir="../$dir"
		maxlvl=$(($maxlvl - 1));
		if [ -d "$dir" ]; then
			cd $dir >&/dev/null
		fi
	done
}

# Change extensions of specified files.
function chext() {
    local fname
    local new_ext="$1"
    shift
    IFS=$'\n'
    for fname in $@
    do
        mv "$fname" "${fname%.*}.$new_ext"
    done
}

function tools() {
    pushd . >/dev/null
    brtop
    if [ -d $(pwd)/tools ]; then
        PATH=${PATH/$TOOLS:/}
        TOOLS=$(pwd)/tools/cm
        pathmunge ${TOOLS}
        #PATH=${TOOLS}:${PATH}
        echo $TOOLS
    fi
    popd >/dev/null
}

# Create a new git repo with one README commit and cd into it
function git.nr() {
	mkdir $1
	cd $1
	git init
	touch README
	git add README
	git commit -m "First commit."
}

function find.name() {
    wild=\'\*$1\*\'
    sh -c "find . -iname $wild"
}

# Function that takes 2 args, a list and a string,
# and returns 0 if the string is in the list, or
# 1 otherwise.
function contains() {
    for item in $1; do
        if [ "$item" = "$2" ]; then
            return 0
        fi
    done
    return 1
}

# From Eli Bendersky
# http://eli.thegreenplace.net/2013/06/11/keeping-persistent-history-in-bash/
# https://github.com/eliben/code-for-blog/blob/master/2016/persistent-history/add-persistent-history.sh
function log_bash_persistent_history() {
    local rc=$?
    [[ $(history 1) =~ ^\ *[0-9]+\ +([^\ ]+\ [^\ ]+)\ +(.*)$ ]]
    local date_part="${BASH_REMATCH[1]}"
    local command_part="${BASH_REMATCH[2]}"
    # Try to skip usernames/passwords.
    if [[ $command_part == *"$USER"* ]]; then
        return
    fi
    if [[ $command_part == *"API_KEY"* ]]; then
        return
    fi
    if [[ $command_part == *"PASSWORD"* ]]; then
        return
    fi
    for username in "$_USERNAMES"; do
        if [[ $command_part == *"$username"* ]]; then
            return
        fi
    done
    if [ "$command_part" != "$PERSISTENT_HISTORY_LAST" ]; then
        echo "$HOSTNAME | $date_part | $command_part" >> ~/.persistent_history
        export PERSISTENT_HISTORY_LAST="$command_part"
    fi
}

# gitignore.io
# http://www.gitignore.io/cli
function gi() {
    curl http://www.gitignore.io/api/$@ ;
}

# Linux?
function isLinux() {
    if [ "$OS" = "Linux" ]; then
        return 0
    fi
    return 1
}

# Mac?
function isMac() {
    if [ "$OS" = "Darwin" ]; then
        return 0
    fi
    return 1
}

# iTerm2 tab titles
function title() {
    if [ ! -e "${HOME}/.iterm2_shell_integration.bash" ]; then
        return
    fi
    if [ "$1" ]; then
        # Manually specify the title.
        echo -ne "\033]0;${*}\007"
    else
        # This shows the path from ~ in the title.
        #echo -ne "\033]0;${PWD/#$HOME/~}\007"
        # This shows the last part of the path in the title.
        #echo -ne "\033]0;${PWD##*/}\007"

        # This shows the current git repo, or directory, in the title.
        if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            local directory
            echo -ne "\033];${PWD##*/}\007"
        else
            local branch
            local branchdir
            branchdir=$(basename "$(git rev-parse --show-toplevel)")
            branch=$(git branch 2>/dev/null | grep -e '\* ' | sed "s/^..\(.*\)/{\1}/")
            echo -ne "\033];[$branchdir] ${PWD##*/} $branch\007"
        fi
    fi
}

function gpip2() {
   PIP_REQUIRE_VIRTUALENV="0" pip2 "$@"
}

function gpip() {
   PIP_REQUIRE_VIRTUALENV="0" pip3 "$@"
}

function upgrade_pyenvs() {
    if command -v pyenv 1>/dev/null 2>&1; then
        for env_ver in $(pyenv versions --bare); do 
            pyenv shell $env_ver
            pyenv version
            PIP_REQUIRE_VIRTUALENV="0" pip3 install --quiet --upgrade pip gnureadline wheel virtualenv virtualenvwrapper
            pyenv shell --unset
        done
        pyenv shell --unset
        unset PYENV_VERSION
        pyenv version
    fi
}

# Clone a repo and install pre-commit hooks if configured.
function git.clone() {
    git clone $1
    subdir="${1##*/}"
    subdir="${subdir%.git}"
    pushd "${subdir}" > /dev/null
    if [ -e .pre-commit-config.yaml ]; then
        if [ ! -e ./configure-hooks.sh ]; then
            echo "Error: pre-commit hooks required, but install script is not present!"
            popd > /dev/null
            return 1
        fi
        which pre-commit >/dev/null || {
            echo "Error: pre-commit hooks required, but 'pre-commit' is not installed!"
            popd > /dev/null
            return 1
        }
        ./configure-hooks.sh --install
    fi
    popd > /dev/null
    return 0
}

gen_insomnia() {
    cat << EOF > ~/insomnia/.env
AWS_ACCESS_KEY_ID=$(aws configure get $AWS_PROFILE.aws_access_key_id)
AWS_SECRET_ACCESS_KEY=$(aws configure get $AWS_PROFILE.aws_secret_access_key)
AWS_SESSION_TOKEN=$(aws configure get $AWS_PROFILE.aws_session_token)
EOF
}

if [ -f ~/dotfiles/shellfunctions-personal ]; then
    source ~/dotfiles/shellfunctions-personal
fi
if [ -f ~/dotfiles/shellfunctions-work ]; then
    source ~/dotfiles/shellfunctions-work
fi

